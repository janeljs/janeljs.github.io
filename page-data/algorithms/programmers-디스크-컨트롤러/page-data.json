{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithms/programmers-디스크-컨트롤러/","result":{"data":{"site":{"siteMetadata":{"title":"Jane's PS Blog","author":"[Jisun Lim]","siteUrl":"https://janeljs.github.io","comment":{"disqusShortName":"","utterances":"janeljs/janeljs.github.io"},"sponsor":{"buyMeACoffeeId":"janeljs"}}},"markdownRemark":{"id":"4d082dc2-d536-54e6-a435-703433b2b3ec","excerpt":"Description  Constraints jobs의 길이는 1 이상 500 이하입니다. jobs의 각 행은 하나의 작업에 대한 작업이 요청되는 시점, 작업의 소요시간 입니다. 각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다. 각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다. 하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.  Solution jobs…","html":"<h2 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Description</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다<span class=\"token punctuation\">.</span> 디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다<span class=\"token punctuation\">.</span> 가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다<span class=\"token punctuation\">.</span>\n\n예를들어\n\n<span class=\"token operator\">-</span> 0ms 시점에 3ms가 소요되는 A작업 요청\n<span class=\"token operator\">-</span> 1ms 시점에 9ms가 소요되는 B작업 요청\n<span class=\"token operator\">-</span> 2ms 시점에 6ms가 소요되는 C작업 요청\n와 같은 요청이 들어왔습니다<span class=\"token punctuation\">.</span>\n\n한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">-</span> A<span class=\"token punctuation\">:</span> 3ms 시점에 작업 완료 <span class=\"token punctuation\">(</span>요청에서 종료까지 <span class=\"token punctuation\">:</span> 3ms<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> B<span class=\"token punctuation\">:</span> 1ms부터 대기하다가<span class=\"token punctuation\">,</span> 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료<span class=\"token punctuation\">(</span>요청에서 종료까지 <span class=\"token punctuation\">:</span> 11ms<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> C<span class=\"token punctuation\">:</span> 2ms부터 대기하다가<span class=\"token punctuation\">,</span> 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료<span class=\"token punctuation\">(</span>요청에서 종료까지 <span class=\"token punctuation\">:</span> 16ms<span class=\"token punctuation\">)</span>\n이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms<span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">11</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>가 됩니다<span class=\"token punctuation\">.</span>\n\n하지만 A → C → B 순서대로 처리하면\n\n<span class=\"token operator\">-</span> A<span class=\"token punctuation\">:</span> 3ms 시점에 작업 완료<span class=\"token punctuation\">(</span>요청에서 종료까지 <span class=\"token punctuation\">:</span> 3ms<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> C<span class=\"token punctuation\">:</span> 2ms부터 대기하다가<span class=\"token punctuation\">,</span> 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료<span class=\"token punctuation\">(</span>요청에서 종료까지 <span class=\"token punctuation\">:</span> 7ms<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> B<span class=\"token punctuation\">:</span> 1ms부터 대기하다가<span class=\"token punctuation\">,</span> 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료<span class=\"token punctuation\">(</span>요청에서 종료까지 <span class=\"token punctuation\">:</span> 17ms<span class=\"token punctuation\">)</span>\n이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms<span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>가 됩니다<span class=\"token punctuation\">.</span>\n\n각 작업에 대해 <span class=\"token punctuation\">[</span>작업이 요청되는 시점<span class=\"token punctuation\">,</span> 작업의 소요시간<span class=\"token punctuation\">]</span>을 담은 <span class=\"token number\">2</span>차원 배열 jobs가 매개변수로 주어질 때<span class=\"token punctuation\">,</span> 작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 <span class=\"token keyword\">return</span> 하도록 solution 함수를 작성해주세요<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>단<span class=\"token punctuation\">,</span> 소수점 이하의 수는 버립니다<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"constraints\" style=\"position:relative;\"><a href=\"#constraints\" aria-label=\"constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Constraints</h2>\n<ul>\n<li>jobs의 길이는 1 이상 500 이하입니다.</li>\n<li>jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.</li>\n<li>각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.</li>\n<li>각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.</li>\n<li>하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.</li>\n</ul>\n<h2 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Solution</h2>\n<ol>\n<li>jobs 배열을 요청 시간에 따라 오름차순으로 정렬</li>\n<li>\n<p>모든 요청이 처리될 때까지 (while)</p>\n<ul>\n<li>현재 작업이 끝나기 전까지 들어온 모든 요청을 pq에 넣어줌</li>\n<li>pq가 비어있다면 현재 시간을 다음 요청 시간으로 조정</li>\n<li>비어있지 않다면 pq에 들어있는 요청을 수행 시간이 짧은 순서대로 처리</li>\n</ul>\n</li>\n<li>전체 시간을 jobs의 수로 나눠서 반환</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> jobs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> totalTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> currentTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> processedRequestNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>job <span class=\"token operator\">-></span> job<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>job <span class=\"token operator\">-></span> job<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>processedRequestNumber <span class=\"token operator\">&lt;</span> jobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> jobs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> jobs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> currentTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                currentTime <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> job <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                totalTime <span class=\"token operator\">+=</span> job<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> currentTime <span class=\"token operator\">-</span> job<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                currentTime <span class=\"token operator\">+=</span> job<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                processedRequestNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> totalTime <span class=\"token operator\">/</span> jobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><strong><em>Source</em></strong></p>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42627\">https://programmers.co.kr/learn/courses/30/lessons/42627</a></li>\n</ul>","frontmatter":{"title":"Programmers 디스크 컨트롤러","date":"May 12, 2021"}}},"pageContext":{"slug":"/algorithms/programmers-디스크-컨트롤러/","previous":{"fields":{"slug":"/algorithms/leetcode-merge-two-sorted-lists/"},"frontmatter":{"title":"LeetCode Merge Two Sorted Lists","category":"algorithms","draft":false}},"next":{"fields":{"slug":"/sql/programmers-최댓값-구하기/"},"frontmatter":{"title":"Programmers 최댓값 구하기","category":"sql","draft":false}}}},"staticQueryHashes":["3128451518","3260639066"]}