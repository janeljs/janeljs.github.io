{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithms/programmers-신규-아이디-추천/","result":{"data":{"site":{"siteMetadata":{"title":"Jane's PS Blog","author":"[Jisun Lim]","siteUrl":"https://janeljs.github.io","comment":{"disqusShortName":"","utterances":"janeljs/janeljs.github.io"},"sponsor":{"buyMeACoffeeId":"janeljs"}}},"markdownRemark":{"id":"ecc00349-553f-5547-97cb-bcb5d1c54d97","excerpt":"문제 설명 카카오에 입사한 신입 개발자 는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.\n다음은 카카오 아이디의 규칙입니다. 아이디의 길이는 3자 이상 1…","html":"<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>카카오에 입사한 신입 개발자 <code class=\"language-text\">네오</code>는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.\n다음은 카카오 아이디의 규칙입니다.</p>\n<ul>\n<li>아이디의 길이는 3자 이상 15자 이하여야 합니다.</li>\n<li>아이디는 알파벳 소문자, 숫자, 빼기(<code class=\"language-text\">-</code>), 밑줄(<code class=\"language-text\">_</code>), 마침표(<code class=\"language-text\">.</code>) 문자만 사용할 수 있습니다.</li>\n<li>단, 마침표(<code class=\"language-text\">.</code>)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.</li>\n</ul>\n<p>“네오”는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.\n신규 유저가 입력한 아이디가 <code class=\"language-text\">new_id</code> 라고 한다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.\n2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.\n3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.\n4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.\n5단계 new_id가 빈 문자열이라면, new_id에 \"a\"를 대입합니다.\n6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.\n     만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.\n7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.</code></pre></div>\n<hr>\n<p>예를 들어, new<em>id 값이 ”…!@BaT#*..y.abcdefghijklm” 라면, 위 7단계를 거치고 나면 new</em>id는 아래와 같이 변경됩니다.</p>\n<p>1단계 대문자 ‘B’와 ‘T’가 소문자 ‘b’와 ‘t’로 바뀌었습니다.\n<code class=\"language-text\">\"...!@BaT#*..y.abcdefghijklm\"</code> → <code class=\"language-text\">\"...!@bat#*..y.abcdefghijklm\"</code></p>\n<p>2단계 ’!’, ’@’, ’#’, ’<em>’ 문자가 제거되었습니다.\n`”…!@bat#</em>..y.abcdefghijklm”<code class=\"language-text\">→</code>“…bat..y.abcdefghijklm”`</p>\n<p>3단계 ’…’와 ’..’ 가 ’.’로 바뀌었습니다.\n<code class=\"language-text\">\"...bat..y.abcdefghijklm\"</code> → <code class=\"language-text\">\".bat.y.abcdefghijklm\"</code></p>\n<p>4단계 아이디의 처음에 위치한 ’.’가 제거되었습니다.\n<code class=\"language-text\">\".bat.y.abcdefghijklm\"</code> → <code class=\"language-text\">\"bat.y.abcdefghijklm\"</code></p>\n<p>5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.\n<code class=\"language-text\">\"bat.y.abcdefghijklm\"</code> → <code class=\"language-text\">\"bat.y.abcdefghijklm\"</code></p>\n<p>6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.\n<code class=\"language-text\">\"bat.y.abcdefghijklm\"</code> → <code class=\"language-text\">\"bat.y.abcdefghi\"</code></p>\n<p>7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.\n<code class=\"language-text\">\"bat.y.abcdefghi\"</code> → <code class=\"language-text\">\"bat.y.abcdefghi\"</code></p>\n<p>따라서 신규 유저가 입력한 new_id가 ”…!@BaT#*..y.abcdefghijklm”일 때, 네오의 프로그램이 추천하는 새로운 아이디는 “bat.y.abcdefghi” 입니다.</p>\n<hr>\n<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>[문제]</strong></h2>\n<p>신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, “네오”가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.</p>\n<h2 id=\"제한사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>[제한사항]</strong></h2>\n<p>new<em>id는 길이 1 이상 1,000 이하인 문자열입니다.\nnew</em>id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.\nnew<em>id에 나타날 수 있는 특수문자는 `-</em>.~!@#$%^&#x26;*()=+[{]}:?,&#x3C;>/` 로 한정됩니다.</p>\n<hr>\n<h2 id=\"입출력-예\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>[입출력 예]</strong></h2>\n<table>\n<thead>\n<tr>\n<th>no</th>\n<th>new_id</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>예1</td>\n<td><code class=\"language-text\">\"...!@BaT#*..y.abcdefghijklm\"</code></td>\n<td><code class=\"language-text\">\"bat.y.abcdefghi\"</code></td>\n</tr>\n<tr>\n<td>예2</td>\n<td><code class=\"language-text\">\"z-+.^.\"</code></td>\n<td><code class=\"language-text\">\"z--\"</code></td>\n</tr>\n<tr>\n<td>예3</td>\n<td><code class=\"language-text\">\"=.=\"</code></td>\n<td><code class=\"language-text\">\"aaa\"</code></td>\n</tr>\n<tr>\n<td>예4</td>\n<td><code class=\"language-text\">\"123_.def\"</code></td>\n<td><code class=\"language-text\">\"123_.def\"</code></td>\n</tr>\n<tr>\n<td>예5</td>\n<td><code class=\"language-text\">\"abcdefghijklmn.p\"</code></td>\n<td><code class=\"language-text\">\"abcdefghijklmn\"</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"입출력-예에-대한-설명\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"입출력 예에 대한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>입출력 예에 대한 설명</strong></h2>\n<p><strong>입출력 예 #1</strong>\n문제의 예시와 같습니다.</p>\n<p><strong>입출력 예 #2</strong>\n7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.</p>\n<p>1단계 변화 없습니다.\n2단계 <code class=\"language-text\">\"z-+.^.\"</code> → <code class=\"language-text\">\"z-..\"</code>\n3단계 <code class=\"language-text\">\"z-..\"</code> → <code class=\"language-text\">\"z-.\"</code>\n4단계 <code class=\"language-text\">\"z-.\"</code> → <code class=\"language-text\">\"z-\"</code>\n5단계 변화 없습니다.\n6단계 변화 없습니다.\n7단계 <code class=\"language-text\">\"z-\"</code> → <code class=\"language-text\">\"z--\"</code></p>\n<p><strong>입출력 예 #3</strong>\n7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.</p>\n<p>1단계 변화 없습니다.\n2단계 <code class=\"language-text\">\"=.=\"</code> → <code class=\"language-text\">\".\"</code>\n3단계 변화 없습니다.\n4단계 <code class=\"language-text\">\".\"</code> → <code class=\"language-text\">\"\"</code> (new_id가 빈 문자열이 되었습니다.)\n5단계 <code class=\"language-text\">\"\"</code> → <code class=\"language-text\">\"a\"</code>\n6단계 변화 없습니다.\n7단계 <code class=\"language-text\">\"a\"</code> → <code class=\"language-text\">\"aaa\"</code></p>\n<p><strong>입출력 예 #4</strong>\n1단계에서 7단계까지 거치는 동안 new<em>id(“123</em>.def”)는 변하지 않습니다. 즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다.</p>\n<p><strong>입출력 예 #5</strong>\n1단계 변화 없습니다.\n2단계 변화 없습니다.\n3단계 변화 없습니다.\n4단계 변화 없습니다.\n5단계 변화 없습니다.\n6단계 <code class=\"language-text\">\"abcdefghijklmn.p\"</code> → <code class=\"language-text\">\"abcdefghijklmn.\"</code> → <code class=\"language-text\">\"abcdefghijklmn\"</code>\n7단계 변화 없습니다.</p>\n<h2 id=\"답안\" style=\"position:relative;\"><a href=\"#%EB%8B%B5%EC%95%88\" aria-label=\"답안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>답안</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>new_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    answer <span class=\"token operator\">=</span> new_id<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    answer <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'[^a-z\\d\\-\\_\\.]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span>\n    answer <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\.\\.+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span>\n    answer <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'^\\.|\\.$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> answer <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span> answer <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n    answer <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'\\.$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">+=</span> answer<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<ul>\n<li>\n<p>다른 풀이</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>new_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\nanswer <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token comment\"># 1</span>\nnew_id <span class=\"token operator\">=</span> new_id<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> new_id<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> c<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> c <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">+=</span> c\n<span class=\"token comment\"># 3</span>\n<span class=\"token keyword\">while</span> <span class=\"token string\">'..'</span> <span class=\"token keyword\">in</span> answer<span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> answer<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 4</span>\n<span class=\"token keyword\">if</span> answer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> answer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'.'</span>\n<span class=\"token keyword\">if</span> answer<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> answer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 5</span>\n<span class=\"token keyword\">if</span> answer <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n<span class=\"token comment\"># 6</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> answer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> answer<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">=</span> answer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 7</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">+=</span> answer<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">return</span> answer</code></pre></div>\n</li>\n<li>\n<p>자바 풀이</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> new_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> answer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> new_id<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[^-_.a-z0-9]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[.]{2,}\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[.]|[.]$\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        temp<span class=\"token operator\">+=</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[.]|[.]$\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n            temp<span class=\"token operator\">+=</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    answer<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"정규식\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D\" aria-label=\"정규식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규식</h3>\n<ul>\n<li>\n<p>re.sub(‘패턴’, ‘바꿀문자열’, ‘문자열’, 바꿀횟수)</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'apple|orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fruit'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple box orange tree'</span><span class=\"token punctuation\">)</span>    \n<span class=\"token comment\"># apple 또는 orange를 fruit로 바꿈</span>\n<span class=\"token string\">'fruit box fruit tree'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'[0-9]+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1 2 Fizz 4 Buzz Fizz 7 8'</span><span class=\"token punctuation\">)</span>    \n<span class=\"token comment\"># 숫자만 찾아서 n으로 바꿈</span>\n<span class=\"token string\">'n n Fizz n Buzz Fizz n n'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">multiple10</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 매개변수로 매치 객체를 받음</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 매칭된 문자열을 가져와서 정수로 변환</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 숫자에 10을 곱한 뒤 문자열로 변환해서 반환</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'[0-9]+'</span><span class=\"token punctuation\">,</span> multiple10<span class=\"token punctuation\">,</span> <span class=\"token string\">'1 2 Fizz 4 Buzz Fizz 7 8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'10 20 Fizz 40 Buzz Fizz 70 80'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'[0-9]+'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1 2 Fizz 4 Buzz Fizz 7 8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'10 20 Fizz 40 Buzz Fizz 70 80'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">'([a-z]+) ([0-9]+)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\2 \\\\1 \\\\2 \\\\1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello 1234'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 그룹 2, 1, 2, 1 순으로 바꿈</span>\n<span class=\"token string\">'1234 hello 1234 hello'</span></code></pre></div>\n</li>\n</ul>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><strong><em>Source</em></strong></p>\n<ul>\n<li><a href=\"https://dojang.io/mod/page/view.php?id=2438\">https://dojang.io/mod/page/view.php?id=2438</a></li>\n</ul>","frontmatter":{"title":"Programmers 신규 아이디 추천","date":"July 07, 2021"}}},"pageContext":{"slug":"/algorithms/programmers-신규-아이디-추천/","previous":{"fields":{"slug":"/sql/programmers-최댓값-구하기/"},"frontmatter":{"title":"Programmers 최댓값 구하기","category":"sql","draft":false}},"next":{"fields":{"slug":"/sql/programmers-이름이-없는-동물의-아이디/"},"frontmatter":{"title":"Programmers 이름이 없는 동물의 아이디","category":"sql","draft":false}}}},"staticQueryHashes":["3128451518","3260639066"]}