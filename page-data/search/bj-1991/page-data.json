{"componentChunkName":"component---src-templates-blog-post-js","path":"/search/bj-1991/","result":{"data":{"site":{"siteMetadata":{"title":"Jane's PS Blog","author":"[Jisun Lim]","siteUrl":"https://janeljs.github.io","comment":{"disqusShortName":"","utterances":"janeljs/janeljs.github.io"},"sponsor":{"buyMeACoffeeId":"janeljs"}}},"markdownRemark":{"id":"40ac49de-6e40-5485-9e5e-d1bdbea854f7","excerpt":"Description  Input  Output  Solution 평소에 if와 elif문을 크게 구분하지 않고 사용했었는데, if 대신 elif문으로 구현하니까 루트의 오른쪽 노드들은 탐색하지 않는 문제가 발생했다. if문은 앞의 if문이 일 경우에도 조건을 검사하는 반면, elif문은 앞의 if문이 일 경우에는 실행되지 않는다.  Feedback 자료구조 구현하는 거 너무 재밌다.  Source https://www.acmicpc.net/problem/1991 ndb796","html":"<h2 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Description</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">이진 트리를 입력받아 전위 순회<span class=\"token punctuation\">(</span>preorder traversal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 중위 순회<span class=\"token punctuation\">(</span>inorder traversal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 후위 순회<span class=\"token punctuation\">(</span>postorder traversal<span class=\"token punctuation\">)</span>한 결과를 출력하는 프로그램을 작성하시오<span class=\"token punctuation\">.</span>\n\n전위 순회한 결과 <span class=\"token punctuation\">:</span> ABDCEFG <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span>루트<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>왼쪽 자식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>오른쪽 자식<span class=\"token punctuation\">)</span>\n중위 순회한 결과 <span class=\"token punctuation\">:</span> DBAECFG <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span>왼쪽 자식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>루트<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>오른쪽 자식<span class=\"token punctuation\">)</span>\n후위 순회한 결과 <span class=\"token punctuation\">:</span> DBEGFCA <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span>왼쪽 자식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>오른쪽 자식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>루트<span class=\"token punctuation\">)</span>\n가 된다<span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"input\" style=\"position:relative;\"><a href=\"#input\" aria-label=\"input permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Input</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">첫째 줄에는 이진 트리의 노드의 개수 N<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>≤N≤<span class=\"token number\">26</span><span class=\"token punctuation\">)</span>이 주어진다<span class=\"token punctuation\">.</span> 둘째 줄부터 N개의 줄에 걸쳐 각 노드와 그의 왼쪽 자식 노드<span class=\"token punctuation\">,</span> 오른쪽 자식 노드가 주어진다<span class=\"token punctuation\">.</span> 노드의 이름은 A부터 차례대로 영문자 대문자로 매겨지며<span class=\"token punctuation\">,</span> 항상 A가 루트 노드가 된다<span class=\"token punctuation\">.</span> 자식 노드가 없는 경우에는 <span class=\"token punctuation\">.</span>으로 표현된다<span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"output\" style=\"position:relative;\"><a href=\"#output\" aria-label=\"output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Output</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">첫째 줄에 전위 순회<span class=\"token punctuation\">,</span> 둘째 줄에 중위 순회<span class=\"token punctuation\">,</span> 셋째 줄에 후위 순회한 결과를 출력한다<span class=\"token punctuation\">.</span> 각 줄에 N개의 알파벳을 공백 없이 출력하면 된다<span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Solution</h2>\n<ul>\n<li>평소에 if와 elif문을 크게 구분하지 않고 사용했었는데, if 대신 elif문으로 구현하니까 루트의 오른쪽 노드들은 탐색하지 않는 문제가 발생했다.</li>\n<li>if문은 앞의 if문이 <strong><code class=\"language-text\">True</code></strong>일 경우에도 조건을 검사하는 반면, elif문은 앞의 if문이 <strong><code class=\"language-text\">True</code></strong>일 경우에는 실행되지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n\npreorder <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">preorder_traversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> preorder\n    preorder <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>\n        preorder_traversal<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># elif를 쓸 경우 root 노드의 오른 편은 검사하지 않은 채 ABD만 출력된다.</span>\n        preorder_traversal<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ninorder <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">inorder_traversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> inorder\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>\n        inorder_traversal<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    inorder <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>\n        inorder_traversal<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\npostorder <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">postorder_traversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> postorder\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>\n        postorder_traversal<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>\n        postorder_traversal<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    postorder <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>value\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntree <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    v<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\nroot <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span>\npreorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\ninorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\npostorder_traversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"feedback\" style=\"position:relative;\"><a href=\"#feedback\" aria-label=\"feedback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Feedback</h2>\n<ul>\n<li>자료구조 구현하는 거 너무 재밌다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> left_node<span class=\"token punctuation\">,</span> right_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">=</span> left_node\n        self<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">=</span> right_node\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        pre_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        pre_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">in_order</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        in_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        in_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        post_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n        post_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntree <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data<span class=\"token punctuation\">,</span> left_node<span class=\"token punctuation\">,</span> right_node <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tree<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> left_node<span class=\"token punctuation\">,</span> right_node<span class=\"token punctuation\">)</span>\n\npre_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nin_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npost_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><strong><em>Source</em></strong></p>\n<ul>\n<li><a href=\"https://www.acmicpc.net/problem/1991\">https://www.acmicpc.net/problem/1991</a></li>\n<li><a href=\"https://github.com/ndb796/Fast_Campus_Algorithm_Lecture_Notes/blob/master/Solutions/%5B10%5D_1.py\">ndb796</a></li>\n</ul>","frontmatter":{"title":"백준 1991번 트리 순회","date":"January 10, 2021"}}},"pageContext":{"slug":"/search/bj-1991/","previous":{"fields":{"slug":"/search/bj-2110/"},"frontmatter":{"title":"백준 2110번 공유기 설치","category":"search","draft":false}},"next":{"fields":{"slug":"/algorithms/leetcode-two-sum/"},"frontmatter":{"title":"LeetCode Two Sum","category":"algorithms","draft":false}}}},"staticQueryHashes":["3128451518","3260639066"]}