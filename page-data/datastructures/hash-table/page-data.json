{"componentChunkName":"component---src-templates-blog-post-js","path":"/datastructures/hash-table/","result":{"data":{"site":{"siteMetadata":{"title":"Jane's PS Blog","author":"[Jisun Lim]","siteUrl":"https://janeljs.github.io","comment":{"disqusShortName":"","utterances":"janeljs/janeljs.github.io"},"sponsor":{"buyMeACoffeeId":"janeljs"}}},"markdownRemark":{"id":"1c0fd153-9a84-5c31-a5d1-1817aef8c808","excerpt":"해시 테이블(Hash table) 쌍으로 이뤄진 값들의 리스트 key와 value로 구성 해시 테이블 = 해시 = 맵 = 해시 맵 = 딕셔너리 = 연관 배열 사용 목적 효율적인 데이터 관리 가능 무한에 가까운 데이터들을 유한한 개수의 해시값으로 매핑 -> 작은 크기의 캐시 메모리로도 프로세스 관리 가능  데이터 처리 속도가 빠름  해싱 문자를 숫자로 변환 해시 함수 문자를 특정 숫자로 변환하는데 사용한 코드 Hash code: f(x): keys -> integers Memory address…","html":"<h2 id=\"해시-테이블hash-table\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94hash-table\" aria-label=\"해시 테이블hash table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 테이블(Hash table)</h2>\n<ul>\n<li>쌍으로 이뤄진 값들의 리스트</li>\n<li>key와 value로 구성</li>\n<li>해시 테이블 = 해시 = 맵 = 해시 맵 = 딕셔너리 = 연관 배열</li>\n</ul>\n<br/>\n<h3 id=\"사용-목적\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\" aria-label=\"사용 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 목적</h3>\n<ul>\n<li>\n<p>효율적인 데이터 관리 가능</p>\n<ul>\n<li>무한에 가까운 데이터들을 유한한 개수의 해시값으로 매핑 -> 작은 크기의 캐시 메모리로도 프로세스 관리 가능 </li>\n</ul>\n</li>\n<li>데이터 처리 속도가 빠름 </li>\n</ul>\n<h3 id=\"해싱\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%B1\" aria-label=\"해싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해싱</h3>\n<p>문자를 숫자로 변환</p>\n<br/>\n<h3 id=\"해시-함수\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98\" aria-label=\"해시 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 함수</h3>\n<ul>\n<li>\n<p>문자를 특정 숫자로 변환하는데 사용한 코드</p>\n<ul>\n<li>Hash code: f(x): keys -> integers</li>\n<li>Memory address</li>\n<li>Integer Cast</li>\n<li>\n<p>Component sum</p>\n<ul>\n<li>key를 특정 길이의 컴포넌트로 나눈다음 각 컴포넌트를 더한다 (overflow 무시)</li>\n<li>integer type의 bit와 같거나 더 긴 길이를 갖고있는 numeric key에 적합 (e.g. java의 long, double)</li>\n</ul>\n</li>\n<li>\n<p>Polynomial accumulation</p>\n<ul>\n<li>충돌을 피하는데 유리함 </li>\n</ul>\n</li>\n<li>Compression function: g(x): integers -> [O, N-1]</li>\n<li>h(x) = g(f(x))</li>\n<li>다른 사람이 사용한 좋은 hash code가 있다면 compression function을 사용해서 재활용할 수 있음</li>\n</ul>\n</li>\n<li>동일한 문자열을 받으면 항상 동일한 숫자를 반환해야 함</li>\n<li>충돌을 피하게 key를 분산시키는 것이 목적\ne.g. h(x) = x mod N\ne.g. h(x) = last four digits of x</li>\n</ul>\n<br/>\n<h3 id=\"데이터-저장\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%80%EC%9E%A5\" aria-label=\"데이터 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 저장</h3>\n<ol>\n<li>키에 해시 함수 적용</li>\n<li>value를 해시 함수에서 반환된 값 인덱스에 저장</li>\n</ol>\n<h3 id=\"데이터-검색\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%83%89\" aria-label=\"데이터 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 검색</h3>\n<ol>\n<li>function[“apple”]에서 apple을 해싱</li>\n<li>해시 함수가 반환한 값의 인덱스로 가서 저장되어 있는 값을 반환</li>\n</ol>\n<p>💡 키를 이용하면 바로 검색하는 것이 가능하기 때문에 시간복잡도는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>이다.</p>\n<p><strong>But</strong>, 해시테이블에 충돌이 일어나 모든 데이터가 해시 테이블의 한 셀에 들어간다면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> 소요</p>\n<br/>\n<h3 id=\"충돌\" style=\"position:relative;\"><a href=\"#%EC%B6%A9%EB%8F%8C\" aria-label=\"충돌 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>충돌</h3>\n<p>해시 함수가 반환하는 값이 동일하여 이미 채워진 셀에 데이터를 추가하는 것</p>\n<p>😎 분리 연결법으로 해결할 수 있다.</p>\n<h3 id=\"분리-연결법seperate-chaining\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A6%AC-%EC%97%B0%EA%B2%B0%EB%B2%95seperate-chaining\" aria-label=\"분리 연결법seperate chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분리 연결법(Seperate Chaining)</h3>\n<ul>\n<li>\n<p><strong>개방 해슁 또는 Open Hashing 기법</strong> 중 하나: 해쉬 테이블 저장공간 외의 공간을 활용하는 기법</p>\n<ul>\n<li><strong>연결 리스트</strong>: 충돌이 일어나면, 링크드 리스트로 데이터를 추가로 뒤에 연결시켜서 저장</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_key</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token number\">8</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index_key <span class=\"token operator\">=</span> get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>index_key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> index_key<span class=\"token punctuation\">:</span>\n                hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n                <span class=\"token keyword\">return</span>\n        hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>index_key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>index_key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index_key <span class=\"token operator\">=</span> get_key<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    hash_address <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>index_key<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> index_key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> hash_table<span class=\"token punctuation\">[</span>hash_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<ul>\n<li>\n<p><strong>배열</strong>: 충돌이 발생했을 때 셀에 하나의 값을 넣는 대신 배열로의 참조를 통해 저장 </p>\n<ol>\n<li>키를 해싱</li>\n<li>\n<p>해당 주소에 값이 아닌 배열들의 배열이 있음 발견</p>\n<ul>\n<li>배열들의 배열:  각 인덱스에 한 쌍의 key와 value로 구성된 배열 존재</li>\n</ul>\n</li>\n<li>배열들의 배열의 하위 배열에서 key를 확인하며 일치하는 key를 찾을 때까지 검색, key가 있는 배열의 인덱스 1에 있는 value를 반환</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"개방-주소법open-addressing\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%A9-%EC%A3%BC%EC%86%8C%EB%B2%95open-addressing\" aria-label=\"개방 주소법open addressing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개방 주소법(Open Addressing)</h3>\n<ul>\n<li>해쉬 테이블 저장공간 안에서 충돌 문제를 해결하는 기법</li>\n<li>hash table array의 빈공간을 사용 </li>\n<li>\n<p>Linear Probing(선형 탐색)</p>\n<ul>\n<li><strong>폐쇄 해슁 또는 Close Hashing 기법</strong> 중 하나 </li>\n<li>해시 충돌 시, 해당 hash address의 다음 address부터 맨 처음 나오는 빈공간에 데이터를 삽입 </li>\n<li>저장공간 활용도가 높다. </li>\n</ul>\n</li>\n<li>\n<p>Quadratic Probing(제곱 탐색)</p>\n<ul>\n<li>해시충돌 시 제곱만큼 건너뛴 버켓에 데이터를 삽입(1,4,9,16..)</li>\n</ul>\n</li>\n<li>\n<p>Double Hahsing(이중 해시)</p>\n<ul>\n<li>해시충돌 시 다른 해시함수를 한 번 더 적용한 결과를 이용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"해시-테이블의-효율성-결정-요인\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EA%B2%B0%EC%A0%95-%EC%9A%94%EC%9D%B8\" aria-label=\"해시 테이블의 효율성 결정 요인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 테이블의 효율성 결정 요인</h3>\n<ul>\n<li>해시 테이블에 저장하는 데이터의 수</li>\n<li>\n<p>해시 테이블에서 사용 가능한 셀의 수</p>\n<ul>\n<li>사용가능한 셀이 적은데 많은 데이터를 저장하면 비효율적</li>\n</ul>\n</li>\n<li>\n<p>사용하는 해시 함수의 종류</p>\n<ul>\n<li>셀의 갯수는 100인데 해시 함수의 return 값이 1~9 사이의 숫자라면 비효율적</li>\n<li>좋은 해시함수 = 사용 가능한 모든 셀에 데이터를 분산시키는 함수</li>\n</ul>\n</li>\n</ul>\n<p>💡 해시테이블 설계시 메모리 낭비와 충돌 모두 고려해야 한다.</p>\n<br/>\n<h3 id=\"부하율\" style=\"position:relative;\"><a href=\"#%EB%B6%80%ED%95%98%EC%9C%A8\" aria-label=\"부하율 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부하율</h3>\n<p>데이터와 셀 간 비율</p>\n<ul>\n<li>부하율을 정해놓으면 데이터가 새로운 셀들에 균등하게 분산되어 저장되도록 해시 테이블을 확장할 수 있음</li>\n</ul>\n<br/>\n<h3 id=\"해시테이블을-집합으로-사용하기\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%A7%91%ED%95%A9%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"해시테이블을 집합으로 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시테이블을 집합으로 사용하기</h3>\n<p>각 데이터를 해시 테이블의 key, value에는 true 등 boolean값 할당</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> set <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"candy\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"chocolate\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// O(1)에 삽입 가능</span>\n\n<span class=\"token comment\">/*이미 있는 키를 추가한다면*/</span>\n<span class=\"token keyword\">set</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"candy\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// O(1)에 삽입 가능, 덮어쓰기 때문에 검색이 필요없다</span></code></pre></div>\n<h3 id=\"예제-카카오톡-투표-기능-항목-추가-가능\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%86%A1-%ED%88%AC%ED%91%9C-%EA%B8%B0%EB%8A%A5-%ED%95%AD%EB%AA%A9-%EC%B6%94%EA%B0%80-%EA%B0%80%EB%8A%A5\" aria-label=\"예제 카카오톡 투표 기능 항목 추가 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제: 카카오톡 투표 기능 (항목 추가 가능)</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> votes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addVote</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">candidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>votes<span class=\"token punctuation\">[</span>candidate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 이미 항목이 있으면</span>\n    votes<span class=\"token punctuation\">[</span>candidate<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 투표수 추가</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    votes<span class=\"token punctuation\">[</span>candidate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 없으면 1 배정</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countVotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> votes<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 각 키에 득표수가 저장되어 있는 해시테이블 반환</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><strong><em>Source</em></strong>  </p>\n<ul>\n<li>A Common-Sense Guide to Data Structures and Algorithms</li>\n<li>Data Structures and Algorithms in Java</li>\n<li><a href=\"https://yjshin.tistory.com/entry/%EC%95%94%ED%98%B8%ED%95%99-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%A4%91\">yjshin tistory blog</a></li>\n<li><a href=\"https://www.fun-coding.org/Chapter09-hashtable-live.html\">잔재미코딩</a></li>\n<li><a href=\"https://preamtree.tistory.com/20\">Preamtree의 행복로그</a></li>\n</ul>","frontmatter":{"title":"[DS] 해시 테이블(Hash table)","date":"October 30, 2020"}}},"pageContext":{"slug":"/datastructures/hash-table/","previous":{"fields":{"slug":"/python/comprehension/"},"frontmatter":{"title":"[python] 컴프리헨션(Comprehension)","category":"python","draft":false}},"next":{"fields":{"slug":"/datastructures/배열/"},"frontmatter":{"title":"[DS] 배열(Array)","category":"datastructures","draft":false}}}},"staticQueryHashes":["3128451518","3260639066"]}