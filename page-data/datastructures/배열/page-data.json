{"componentChunkName":"component---src-templates-blog-post-js","path":"/datastructures/배열/","result":{"data":{"site":{"siteMetadata":{"title":"Jane's PS Blog","author":"[Jisun Lim]","siteUrl":"https://janeljs.github.io","comment":{"disqusShortName":"","utterances":"janeljs/janeljs.github.io"},"sponsor":{"buyMeACoffeeId":"janeljs"}}},"markdownRemark":{"id":"7715dd52-582a-5c91-829e-ab4b56b258c3","excerpt":"배열(Array) 데이터 원소들의 리스트 한 자료형의 여러 값들이 메모리상에 모여 있는 구조 읽기 O(1) 소요 컴퓨터는 모든 메모리 주소에 한 번에 접근 가능 각 배열에는 메모리의 시작 주소가 저장됨 배열의 인덱스는 0부터 시작 → 인덱스의 메모리 주소가 1068인 배열이 있다면 인덱스 3에 접근 할 때는 1068+3인 1071 메모리 주소로 바로 가면 된다. 검색 정렬된 배열일 경우 O(log n) 소요 이진 검색 사용 (아래는 수도코드이다) 정렬되지 않은 배열일 경우 O(n…","html":"<h2 id=\"배열array\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4array\" aria-label=\"배열array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열(Array)</h2>\n<ul>\n<li>데이터 원소들의 리스트</li>\n<li>한 자료형의 여러 값들이 메모리상에 모여 있는 구조</li>\n</ul>\n<br/>\n<p><strong>읽기</strong></p>\n<ul>\n<li>\n<p>O(1) 소요</p>\n<ul>\n<li>컴퓨터는 모든 메모리 주소에 한 번에 접근 가능</li>\n<li>각 배열에는 메모리의 시작 주소가 저장됨</li>\n<li>배열의 인덱스는 0부터 시작</li>\n</ul>\n</li>\n</ul>\n<p>→ 인덱스의 메모리 주소가 1068인 배열이 있다면 인덱스 3에 접근 할 때는 1068+3인 1071 메모리 주소로 바로 가면 된다.</p>\n<br/>\n<p><strong>검색</strong></p>\n<ul>\n<li>\n<p>정렬된 배열일 경우 O(log n) 소요</p>\n<ul>\n<li>이진 검색 사용 (아래는 수도코드이다)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Function</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\tlower_bound <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tupper_bound <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n\t<span class=\"token keyword\">while</span> lower_bound <span class=\"token operator\">&lt;=</span> upper_bound <span class=\"token keyword\">do</span>\n\t\tmidpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>upper_bound <span class=\"token operator\">+</span> lower_bound<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> and round off midpoint\n\t\tvalue_at_mid <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>midpoint<span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> value_at_mid\n\t\t\tupper_bound <span class=\"token operator\">=</span> midpoint <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> value_at_mid\n\t\t\tlower_bound <span class=\"token operator\">=</span> midpoint <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value is same <span class=\"token keyword\">with</span> <span class=\"token namespace\">value_at_mid</span>\n\t\t\t<span class=\"token keyword\">return</span> midpoint\n\n<span class=\"token comment\">// 상한선과 하한선이 같아졌는데도 value랑 value_at_mid가 일치하지 않았다면</span>\n<span class=\"token comment\">// array 안에 value가 없다는 의미</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></code></pre></div>\n</li>\n<li>\n<p>정렬되지 않은 배열일 경우 O(n) 소요</p>\n<ul>\n<li>한 번에 한 셀씩 값을 발견할 때까지 확인하기 때문 (선형검색)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<p><strong>삽입</strong></p>\n<ul>\n<li>맨 뒤에 삽입하는 경우 O(1)</li>\n<li>가운데 삽입하고 싶으면 삽입하고 싶은 위치 뒤에 있는 요소를 전부 1칸씩 오른쪽으로 옮긴 뒤 삽입해야 함 → N+1 단계 → O(n)</li>\n<li>단, 정렬된 배열일 경우 검색 연산 먼저 수행햐야 함</li>\n</ul>\n<br/>\n<p><strong>삭제</strong></p>\n<ul>\n<li>N단계 → O(n)</li>\n</ul>\n<br/>\n<p>💡 정렬된 배열: 삽입은 다소 느리지만(O(n)) 검색은 훨씬 빠르다(O(log n)).</p>\n<p>💡 정렬되지 않은 배열: 삽입은 빠르지만(O(1)) 검색이 훨씬 느리다(O(n)).</p>\n<br/>\n<p><strong>복제</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p><strong>출력</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a =\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><strong><em>Source</em></strong>  </p>\n<p>A Common-Sense Guide to Data Structures and Algorithms</p>","frontmatter":{"title":"[DS] 배열(Array)","date":"October 30, 2020"}}},"pageContext":{"slug":"/datastructures/배열/","previous":{"fields":{"slug":"/datastructures/hash-table/"},"frontmatter":{"title":"[DS] 해시 테이블(Hash table)","category":"datastructures","draft":false}},"next":{"fields":{"slug":"/etc/useful-eclipse-shortcuts/"},"frontmatter":{"title":"알아두면 유용한 이클립스 단축키들(Useful eclipse shortcuts)","category":"etc","draft":false}}}},"staticQueryHashes":["3128451518","3260639066"]}